[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import reactive, render, req\nimport matplotlib.pyplot as plt\n\n\n# Use the built-in function to load the Palmer Penguins dataset.\npenguins_df = palmerpenguins.load_penguins()\n\n# Name of Project Page\nui.page_opts(title=\"St_Cyr Penguin Data\", fillable=False)\n\n# Add a sidebar\nwith ui.sidebar(open=\"open\"):  \n    \n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    ui.input_selectize(\n        \"Selected_Attribute\",\n        \"Bill Length in Millimeters\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    \n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly Bins\", 20)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Bin Count\", 1, 100, 20)\n\n    # Add a horizontal line to sidebar\n    ui.hr()\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Penguin Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Chinstrap\"],\n        inline=True,\n    )\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the islands\n    ui.input_checkbox_group(\n        \"selected_islands_list\",\n        \"Penguin Islands\",\n        [\"Torgersen\", \"Biscoe\", \"Dream\"],\n        selected=[\"Torgersen\"],\n        inline=True,\n    )\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n    \n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"Github\", href=\"https://github.com/14dstcyr/cintel-02-data\", target=\"blank\")\n    \n    \n# Create tables and plots displaying all data\n## Data Table and Grid\nwith ui.layout_columns():  \n    with ui.card():  \n        ui.h2(\"Penguins Table\")        \n        @render.data_frame\n        def Penguins_Table():\n                return render.DataTable(penguins_df)\n                    \n    with ui.card():\n        ui.h2(\"Penguins Grid\")\n        \n        @render.data_frame\n        def render_Penguin_Grid():\n            return render.DataGrid(penguins_df)\n\n# Create Histograms and Scatterplot\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.h4(\"Penguin Histogram\")\n\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(penguins_df, x=\"species\", color=\"species\")\n            \n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\")\n        \n        palette = sns.color_palette(\"bright\")  # Use the \"bright\" palette\n\n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_histogram():\n            histplot = sns.histplot(\n                filtered_data(),\n                x=\"body_mass_g\",\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n                palette=palette,\n            )\n            histplot.set_title(\"Penguins\")\n            histplot.set_xlabel(\"Body Mass (g)\")  # Set x-axis label\n            histplot.set_ylabel(\"Count\")  # Set y-axis label\n            return histplot\n        \n \n## Plotly Scatterplot\n    with ui.card():\n        ui.card_header()\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(filtered_data(),\n                          x=\"bill_length_mm\",\n                          y=\"body_mass_g\",\n                          color=\"species\",\n                          title=\"Penguin Scatterplot\",\n                          labels={\"bill_length_mm\": \"Bill Length mm\",\n                                  \"body_mass_g\": \"Body Mass g\"},\n                          size_max=20,\n            )\n            \n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input function used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n", "type": "text"}]